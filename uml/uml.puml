@startuml "FazAConta Classes"

skinparam classAttributeIconSize 0

class User {
  - id: UUID
  - name: str
  - nickname: str
  - email: UserEmail
  - password: UserPassword
  - phone_number: UserPhoneNumber
  - profile_photo: FileData | None
  - pix: Pix | None
  - devices: List<Device>

  + <<getter>> id: UUID
  + <<getter>> name: str
  + <<getter>> nickname: str
  + <<getter>> email: UserEmail
  + <<getter>> password: UserPassword
  + <<getter>> phone_number: PhoneNumber
  + <<getter>> profile_photo: FileData | None
  + <<getter>> pix: Pix | None
  + <<getter>> devices: List<Device>

  + <<setter>> name: None
  + <<setter>> nickname: None
  + <<setter>> password: None
  + <<setter>> phone_number: None  
  + <<setter>> profile_photo: None
  + <<setter>> pix: None

  + addDevice(device: Device): None
}

class UserEmail {
  - value
}

class UserPassword {
  - value

  # bcrypt_compare(plain_text: str, hashed: str): bool
  # hash_password(password: str): str
  + is_already_hashed(): bool
  + compare_password(plain_text_password: str): bool
  + get_hashed_value(): str
}

class UserPhoneNumber {
  - phone_number: str
  + value: str

  + is_valid(phone_number: str) : bool
}

class FileData {
  - key: str
  - src: str
  - size: int
  - filename: str
  - content_type: ContentType
}

enum ContentType {
  image/jpeg
  image/pjpeg
  image/png
  image/gif
}

class Pix {
  - type: PixType
  - value: str
}

enum PixType {
  email
  cpf_cnpj 
  phone_number 
  random
}

class Device {
  - device_id: str
  - device_name: str
  - platform: Platform
  - push_token: str
  - last_login_at: datetime
}

enum Platform {
  ios, android
}

class UserDetail {
  - user_id: UUID
  - email: str
  - nickname: str
  - pix: Pix

  + <<getter>> user_id: UUID
  + <<getter>> email: str
  + <<getter>> nickname: str
  + <<getter>> pix: Pix
}

User *-- UserEmail
User *-- UserPassword
User *-- UserPhoneNumber
User *-- FileData
User *-- Pix
User "1" *-- "n" Device

FileData --> ContentType
Pix --> PixType
Device --> Platform

UserDetail o-- User

class Group {
  - id: UUID
  - title: str
  - description: str
  - image: FileData | None
  - total_expense: float
  - members: List<Member>
  - pending_payments: List<PendingPayment>

  + <<getter>> id: UUID
  + <<getter>> title: str
  + <<getter>> description: str
  + <<getter>> image: FileData | None
  + <<getter>> total_expense: float
  + <<getter>> members: List<Member>
  + <<getter>> pending_payments: List<PendingPayment>

  + <<setter>> title: None
  + <<setter>> description: None
  + <<setter>> image: None

  + add_member(member: Member): None
  + manage_new_transaction(transaction: Transaction): None

  # update_balances(transaction: Transaction): None
  # update_payments(transaction: Transaction): None
}

class Member {
  - user: UserDetail
  - balance: float

  + <<getter>> user_id: UUID
  + <<getter>> user_nickname: str
  + <<getter>> balance: float

  + <<setter>> balance: None
}

class Transaction {
  - id: UUID
  - group_id: UUID
  - title: str
  - amount: float
  - paid_by: UserDetail
  - type: TransactionType
  - participants: List<Participant>

  + <<getter>> id: UUID
  + <<getter>> group_id: UUID
  + <<getter>> title: str
  + <<getter>> amount: float
  + <<getter>> paid_by: UserDetail
  + <<getter>> type: TransactionType
  + <<getter>> participants: List<Participant>

  + add_participant(participant: Participant): None
  + remove_participant(participant: Participant): None
}

enum TransactionType {
  send, expense, reimbursement
}

class Participant {
  - user: UserDetail
  - amount_to_pay: float

  + <<getter>> user: UserDetail 
  + <<getter>> amount_to_pay: float

  + <<setter>> amount_to_pay: None
}

class PendingPayment {
  - from_user: UserDetail
  - to_user: UserDetail
  - amount_to_pay: float

  + <<getter>> from_user: UserDetail
  + <<getter>> to_user: UserDetail 
  + <<getter>> amount_to_pay: float  
}

Group "1" *-- "1..*" Member
Group "1" *-- "0..*" PendingPayment
Group *-- FileData

Member *-- UserDetail
PendingPayment *-- UserDetail

Transaction o-- Group
Transaction *-- UserDetail
Transaction "1" *-- "1..*" Participant
Transaction --> TransactionType

Participant *-- UserDetail

class Friendship {
  - id: UUID
  - user_A: UserDetail
  - user_B: UserDetail
  - total_amount_to_be_paid_by_user_A: float

  + <<getter>> id: UUID
  + <<getter>> user_A: UserDetail
  + <<getter>> user_B: UserDetail
  + <<getter>> total_amount_to_be_paid_by_user_A: float
}

Friendship *-- UserDetail

@enduml